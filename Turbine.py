#!/usr/bin/env python3
from math import hypot, pi, atan
from Nature import Nature
from Wind import Wind

__author__ = 'dmytro'


class Turbine(Nature):
    """
    Wind turbine representation
    Contains necessary parameters as
    x-coordinate, y-coordinate, rotor diameter, height of the axis of rotation,
    Wind at x,y coordinate
    """

    def __init__(self, x, y, d, w=Wind(speed=0, direction=0), xi=0.4, h=10):
        """
        Initializing wind turbine parameters
        :param x: x-coordinate
        :param y: y-coordinate
        :param d: rotor diameter in [meters]
        :param h: height of the axis of rotation in [meters]
        :param v: wind speed at the point x,y in [meters per second]
        :return:
        """
        self.x = x
        self.y = y
        self.d = d
        self.h = h
        self.w = w
        self.xi = xi

    @property
    def area(self):
        """
        Area occupied by wind turbine's rotor
        :return double: swept area of rotor in [square meters]
        """
        return round(pi * self.d**2 / 4, 2)

    @property
    def power(self):
        """
        Power generated by turbine
        :return double: power at specified wind speed in [kWats]
        """
        return round(0.5 * self.xi * self.rho * self.area * self.w.v0**3, 2)

    def dist(self, turbine):
        """
        Distance to another wind turbine
        :param turbine: turbine to calculate distance to
        :return double: distance in meters
        """
        return round(hypot(self.x-turbine.x, self.y-turbine.y), 0)

    def direction(self, turbine):
        """
        Angle (the direction) to another wind turbine
        :param turbine: turbine to calculate direction to
        :return:angle in [radians]
        """
        if self.x == turbine.x:
            return pi
        if self.y == turbine.y:
            return float(0)

        return round(atan(self.y-turbine.y / self.x-turbine.x), 4)

    def __repr__(self):
        return "Turbine: ({x:3.0f}, {y:3.0f})\t({v:2.1f}|{d:1.2f})"\
            .format(x=self.x, y=self.y, v=self.w.v0, d=self.w.direction)


if __name__ == "__main__":
    pass
